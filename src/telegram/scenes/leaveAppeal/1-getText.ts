import IScene from '../../typings/scene';
import HomeMessage from '../../controllers/home';
import { addAppeal } from '../../../services/appeals';
import { getEmployeeByChatId } from '../../../services/employees';

const Scene = require('telegraf/scenes/base');

const scene: IScene = new Scene('leaveAppeal/getText');

scene.backScene = HomeMessage;
scene.nextScene = HomeMessage;

scene.enter(async (ctx: any) => {
  ctx.session.appeal = {};
  await ctx.replyWithHTML('–í–≤–µ–¥—ñ—Ç—å <b>—Ç–µ–∫—Å—Ç</b> –ø—Ä–∏–º—ñ—Ç–∫–∏', scene.backInlineKeyboard.extra());
});

scene.on('text', async (ctx: any) => {
  await ctx.scene.leave();
  ctx.session.appeal.message = ctx.message.text;

  try {
    const { id: employeeId } = await getEmployeeByChatId(ctx.from.id);
    await addAppeal({
      employeeId,
      ...ctx.session.appeal,
    });

    return scene.next(ctx, '–ü—Ä–∏–º—ñ—Ç–∫—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ üëå');
  } catch (err) {
    console.error(err);

    return scene.next(ctx, '–•–º–º, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢\n–°–ø—Ä–æ–±—É–π—Ç–µ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏');
  }
});

export default scene;
