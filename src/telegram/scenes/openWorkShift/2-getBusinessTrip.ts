import IScene from '../../typings/scene';
import WorkShiftActionType from '../../../enums/WorkShiftActionType';
import { getEmployeeByChatId } from '../../../services/employees';
import { addWorkShiftActionChecked } from '../../../services/workShiftsActions';
import WorkShiftActionDuplicateError from '../../../errors/workShiftActionDuplicate';

const Scene = require('telegraf/scenes/base');
const Markup = require('telegraf/markup');

const scene: IScene = new Scene('openWorkShift/getBusinessTrip');

scene.backScene = 'openWorkShift/getRegion';
scene.nextScene = 'openWorkShift/getLocation';

scene.enter(async (ctx: any) => {
  const keyboard = Markup.inlineKeyboard(
    [
      Markup.callbackButton('–¢–∞–∫ üöù', 'businessTrip>true'),
      Markup.callbackButton('–ù—ñ ‚ùå', 'businessTrip>false'),
      Markup.callbackButton('–ù–∞–∑–∞–¥ ‚è™', 'back'),
    ],
    { columns: 2 }
  );
  await ctx.telegram.sendMessage(ctx.from.id, '–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–∞—è–≤–Ω—ñ—Å—Ç—å <b>–≤—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è</b>', {
    reply_markup: keyboard,
    parse_mode: 'HTML',
  });
});

scene.action(/^businessTrip>/, async (ctx: any) => {
  ctx.answerCbQuery();
  const businessTrip = ctx.callbackQuery.data.split('>')[1];
  switch (businessTrip) {
    case 'true': {
      ctx.session.openWorkShift.businessTrip = true;
      break;
    }
    case 'false': {
      ctx.session.openWorkShift.businessTrip = false;
      break;
    }
    default: {
      await ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ');
      return ctx.scene.reenter();
    }
  }

  try {
    const employee = await getEmployeeByChatId(ctx.from.id);
    const workShiftAction = await addWorkShiftActionChecked({
      typeId: WorkShiftActionType.OPEN,
      employeeId: employee.id,
      objectId: ctx.session.openWorkShift.objectId,
      businessTrip: ctx.session.openWorkShift.businessTrip,
    });
    ctx.session.openWorkShift.workShiftActionId = workShiftAction.id;
  } catch (err) {
    console.error(err);
    if (err instanceof WorkShiftActionDuplicateError) {
      await ctx.reply('–í–∏ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏–ª–∏ –∑–º—ñ–Ω—É');
    } else {
      await ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑–º—ñ–Ω—É.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ');
      return ctx.scene.reenter();
    }
  }

  await ctx.scene.leave();
  await scene.next(ctx);
});

export default scene;
