import IScene from '../../typings/scene';
import WorkShiftMessage from '../../controllers/workShift';
import { updateWorkShiftAction } from '../../../services/workShiftsActions';
import { getLocationByCoordinates } from '../../../services/locationChecks';

const Scene = require('telegraf/scenes/base');
const Markup = require('telegraf/markup');

const scene: IScene = new Scene('closeWorkShift/getLocation');

scene.backScene = WorkShiftMessage;
scene.nextScene = WorkShiftMessage;

scene.enter(async (ctx: any) => {
  const keyboard = Markup.keyboard([
    Markup.locationRequestButton('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è üó∫'),
    Markup.button('‚è™ –ù–∞–∑–∞–¥'),
  ])
    .oneTime()
    .resize();

  await ctx.replyWithHTML(
    `–©–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ —Ä–æ–±–æ—Ç—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è üó∫"` +
      `\n<b>–û–±–æ–≤'—è–∑–∫–æ–≤–æ —É–≤—ñ–º–∫–Ω—ñ—Ç—å GPS</b>`,
    keyboard.extra()
  );
});

scene.on('location', async (ctx: any) => {
  const coordinates = ctx.message.location.latitude + ' ' + ctx.message.location.longitude;

  try {
    const location = await getLocationByCoordinates(coordinates);
    await updateWorkShiftAction(ctx.session.closeWorkShift.workShiftActionId, { location });
    await ctx.reply('–î—è–∫—É—î–º–æ, –ª–æ–∫–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–ª–∏! üëå', Markup.removeKeyboard().extra());
  } catch (err) {
    console.error(err);
    await ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ');
    return ctx.scene.reenter();
  }

  await ctx.scene.leave();
  await scene.next(ctx);
});

export default scene;
