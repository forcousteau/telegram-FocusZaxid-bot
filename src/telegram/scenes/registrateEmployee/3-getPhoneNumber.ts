import IScene from '../../typings/scene';

const Scene = require('telegraf/scenes/base');
const Markup = require('telegraf/markup');

const scene: IScene = new Scene('registrateEmployee/getPhoneNumber');

scene.backScene = 'registrateEmployee/getBirthDate';
scene.nextScene = 'registrateEmployee/getIdentificationCode';

scene.enter(async (ctx: any) => {
  const keyboard = Markup.keyboard([Markup.contactRequestButton('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä üìû'), Markup.button('‚è™ –ù–∞–∑–∞–¥')])
    .oneTime()
    .resize();

  await ctx.replyWithHTML(
    '–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –í–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b> –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä üìû"',
    keyboard.extra()
  );
});

scene.on('contact', async ctx => {
  await ctx.scene.leave();
  await ctx.reply('–î—è–∫—É—î–º–æ, —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç—Ä–∏–º–∞–ª–∏! üëå', Markup.removeKeyboard().extra());
  ctx.session.registrateEmployee.phoneNumber = ctx.message.contact.phone_number;
  await scene.next(ctx);
});

scene.on('text', async (ctx: any) => {
  await ctx.scene.leave();
  await ctx.reply('–î—è–∫—É—î–º–æ, —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç—Ä–∏–º–∞–ª–∏! üëå', Markup.removeKeyboard().extra());
  ctx.session.registrateEmployee.phoneNumber = ctx.message.text;
  await scene.next(ctx);
});

export default scene;
